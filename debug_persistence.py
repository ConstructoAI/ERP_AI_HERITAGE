#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de debug pour tester la persistance des donn√©es ERP
"""

import os
import sqlite3
from datetime import datetime
from pathlib import Path
from database_config import DATABASE_PATH
from erp_database import ERPDatabase

def debug_persistence():
    """Teste la persistance des donn√©es"""
    
    print("üîç DEBUG PERSISTANCE - ERP Production DG Inc.")
    print("=" * 60)
    
    # 1. V√©rifier les chemins
    print(f"üìÅ R√©pertoire courant: {os.getcwd()}")
    print(f"üìÑ DATABASE_PATH configur√©: {DATABASE_PATH}")
    print(f"üìä Fichier DB existe: {os.path.exists(DATABASE_PATH)}")
    print(f"üìè Taille du fichier: {os.path.getsize(DATABASE_PATH) if os.path.exists(DATABASE_PATH) else 0} bytes")
    
    print("\nüîç Recherche de tous les fichiers .db:")
    for db_file in Path(".").glob("**/*.db"):
        print(f"  üìÑ {db_file} ({db_file.stat().st_size} bytes)")
    
    # 2. Connecter √† la base de donn√©es principale
    print(f"\nüîó Connexion √†: {DATABASE_PATH}")
    try:
        db = ERPDatabase(DATABASE_PATH)
        print(f"‚úÖ Connexion r√©ussie")
        print(f"üìç Chemin DB dans l'objet: {db.db_path}")
        
        # 3. Compter les projets existants
        projets_count = db.execute_query("SELECT COUNT(*) as count FROM projects")
        companies_count = db.execute_query("SELECT COUNT(*) as count FROM companies") 
        
        print(f"\nüìä DONN√âES ACTUELLES:")
        print(f"  üë• Clients: {companies_count[0]['count'] if companies_count else 0}")
        print(f"  üè¢ Projets: {projets_count[0]['count'] if projets_count else 0}")
        
        # 4. Lister les derniers projets
        if projets_count and projets_count[0]['count'] > 0:
            derniers_projets = db.execute_query("""
                SELECT p.id, p.nom_projet, p.statut, p.created_at, c.nom as client_nom
                FROM projects p
                LEFT JOIN companies c ON p.client_company_id = c.id
                ORDER BY p.created_at DESC
                LIMIT 5
            """)
            
            print(f"\nüìã DERNIERS PROJETS:")
            for i, projet in enumerate(derniers_projets, 1):
                print(f"  {i}. {projet.get('nom_projet', 'N/A')} - {projet.get('client_nom', 'N/A')} ({projet.get('statut', 'N/A')})")
        
        # 5. Test de cr√©ation d'un projet temporaire
        print(f"\nüß™ TEST DE PERSISTANCE:")
        test_client_id = db.execute_insert("""
            INSERT INTO companies (nom, secteur, type_entreprise, created_at)
            VALUES (?, 'Construction', 'CLIENT', datetime('now'))
        """, (f"CLIENT_TEST_{datetime.now().strftime('%H%M%S')}",))
        
        if test_client_id:
            print(f"  ‚úÖ Client test cr√©√© avec ID: {test_client_id}")
            
            test_project_data = {
                'nom_projet': f"PROJET_TEST_{datetime.now().strftime('%H%M%S')}",
                'client_company_id': test_client_id,
                'statut': '√Ä FAIRE',
                'priorite': 'MOYEN',
                'tache': '1.1 Test persistance',
                'date_soumis': datetime.now().isoformat(),
                'prix_estime': 1000.0,
                'description': 'Projet de test pour v√©rifier la persistance'
            }
            
            test_project_id = db.create_project(test_project_data)
            
            if test_project_id:
                print(f"  ‚úÖ Projet test cr√©√© avec ID: {test_project_id}")
                
                # V√©rification imm√©diate
                verification = db.execute_query("SELECT COUNT(*) as count FROM projects WHERE id = ?", (test_project_id,))
                print(f"  üîç V√©rification imm√©diate: {verification[0]['count'] if verification else 0} projet trouv√©")
                
                # V√©rifier la taille du fichier apr√®s insertion
                print(f"  üìè Nouvelle taille fichier: {os.path.getsize(DATABASE_PATH)} bytes")
                
                print(f"\nüíæ POUR TESTER LA PERSISTANCE:")
                print(f"  1. Notez l'ID du projet test: {test_project_id}")
                print(f"  2. Red√©marrez l'application ERP")
                print(f"  3. V√©rifiez si le projet {test_project_data['nom_projet']} existe toujours")
                
            else:
                print(f"  ‚ùå √âchec cr√©ation projet test")
        else:
            print(f"  ‚ùå √âchec cr√©ation client test")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
    
    print("=" * 60)

if __name__ == "__main__":
    debug_persistence()