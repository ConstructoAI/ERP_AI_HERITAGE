#!/usr/bin/env python3
# test_produits_ia.py - Tests pour les fonctionnalit√©s IA des produits
# ERP Production DG Inc. - Tests des nouvelles capacit√©s de l'assistant IA

"""
Tests pour v√©rifier le bon fonctionnement des nouvelles fonctionnalit√©s IA 
pour la cr√©ation et modification de produits via l'assistant Claude
"""

import os
import sys
import traceback
from pathlib import Path

# Ajouter le r√©pertoire parent au PATH pour les imports
sys.path.append(str(Path(__file__).parent))

def test_assistant_ia_produits():
    """Test des fonctionnalit√©s IA pour les produits"""
    print("üß™ TESTS ASSISTANT IA - GESTION PRODUITS")
    print("=" * 60)
    
    try:
        # Imports n√©cessaires
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules import√©s avec succ√®s")
        
        # 1. Initialisation base de donn√©es
        print("\n1Ô∏è‚É£ Initialisation base de donn√©es...")
        db = ERPDatabase()
        if not db.db_path or not os.path.exists(db.db_path):
            print("‚ùå Base de donn√©es non trouv√©e")
            return False
        print(f"‚úÖ Base de donn√©es connect√©e: {db.db_path}")
        
        # 2. Initialisation Assistant IA
        print("\n2Ô∏è‚É£ Initialisation Assistant IA...")
        api_key = get_claude_api_key()
        if not api_key:
            print("‚ö†Ô∏è Cl√© API Claude non configur√©e - tests en mode simulation")
            assistant = AssistantIAClaude(db, None)  # Mode sans API
        else:
            print("‚úÖ Cl√© API Claude configur√©e")
            assistant = AssistantIAClaude(db, api_key)
        
        # 3. Test cr√©ation de produit avec IA
        print("\n3Ô∏è‚É£ Test cr√©ation produit avec IA...")
        
        if assistant.client:  # Si API disponible
            # Test avec instructions r√©alistes
            instructions_creation = """
            Cr√©er un produit acier structural W200x46 pour poutres de construction.
            Prix environ 15$ par pied lin√©aire. Stock initial 50 pi√®ces, minimum 20 pi√®ces.
            Fournisseur principal: Canam Steel. 
            Dimensions standard de 20 pieds de longueur.
            """
            
            print(f"üìù Instructions: {instructions_creation[:100]}...")
            resultat = assistant.creer_produit_avec_ia(instructions_creation)
            
            if resultat['success']:
                print("‚úÖ Cr√©ation produit IA r√©ussie!")
                print(f"   - Produit ID: {resultat.get('produit_id')}")
                print(f"   - Message: {resultat.get('message', '')[:100]}...")
                
                # 4. Test modification du produit cr√©√©
                if resultat.get('produit_id'):
                    print("\n4Ô∏è‚É£ Test modification produit avec IA...")
                    instructions_modification = "Augmenter le prix √† 18$ et le stock minimum √† 25 pi√®ces"
                    
                    resultat_modif = assistant.modifier_produit_avec_ia(
                        resultat['produit_id'], 
                        instructions_modification
                    )
                    
                    if resultat_modif['success']:
                        print("‚úÖ Modification produit IA r√©ussie!")
                        print(f"   - Modifications: {resultat_modif.get('modifications_appliquees', {})}")
                        print(f"   - Impact: {resultat_modif.get('impact', '')[:100]}...")
                    else:
                        print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
                
                # 5. Test analyse produit sp√©cifique
                print("\n5Ô∏è‚É£ Test analyse produit sp√©cifique...")
                resultat_analyse = assistant.analyser_produit_specifique(resultat['produit_id'])
                
                if resultat_analyse['success']:
                    print("‚úÖ Analyse produit IA r√©ussie!")
                    print(f"   - Produit analys√©: {resultat_analyse.get('produit_nom', '')}")
                    print(f"   - Analyse: {resultat_analyse.get('analyse_complete', '')[:150]}...")
                else:
                    print(f"‚ùå Erreur analyse: {resultat_analyse.get('error', '')}")
                    
            else:
                print(f"‚ùå Erreur cr√©ation: {resultat.get('error', '')}")
        
        else:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API")
        
        # 6. Test optimisation catalogue
        print("\n6Ô∏è‚É£ Test optimisation catalogue produits...")
        
        if assistant.client:
            resultat_optim = assistant.optimiser_catalogue_produits()
            
            if resultat_optim['success']:
                print("‚úÖ Optimisation catalogue r√©ussie!")
                print(f"   - Nombre total produits: {resultat_optim.get('nb_produits_total', 0)}")
                print(f"   - Nombre cat√©gories: {resultat_optim.get('nb_categories', 0)}")
                print(f"   - Valeur stock total: ${resultat_optim.get('valeur_stock_total', 0):,.2f}")
            else:
                print(f"‚ùå Erreur optimisation: {resultat_optim.get('error', '')}")
        else:
            print("‚ö†Ô∏è Test optimisation saut√© - pas de cl√© API")
        
        # 7. Test int√©grit√© des fonctions (m√™me sans API)
        print("\n7Ô∏è‚É£ Tests d'int√©grit√© des fonctions...")
        
        # V√©rifier que les fonctions existent
        fonctions_requises = [
            'creer_produit_avec_ia',
            'modifier_produit_avec_ia', 
            'analyser_produit_specifique',
            'optimiser_catalogue_produits'
        ]
        
        for fonction in fonctions_requises:
            if hasattr(assistant, fonction):
                print(f"   ‚úÖ Fonction {fonction} disponible")
            else:
                print(f"   ‚ùå Fonction {fonction} manquante")
                return False
        
        # 8. V√©rifier imports modules produits
        print("\n8Ô∏è‚É£ Test imports modules produits...")
        try:
            from produits import GestionnaireProduits, CATEGORIES_PRODUITS, UNITES_VENTE
            gestionnaire = GestionnaireProduits(db)
            print(f"‚úÖ GestionnaireProduits initialis√©")
            print(f"   - {len(CATEGORIES_PRODUITS)} cat√©gories disponibles")
            print(f"   - {len(UNITES_VENTE)} unit√©s de vente disponibles")
        except ImportError as e:
            print(f"‚ùå Erreur import produits: {e}")
            return False
        
        print("\n" + "=" * 60)
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ L'Assistant IA peut maintenant cr√©er et modifier des produits")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DES TESTS: {e}")
        print(f"üêõ D√©tails: {traceback.format_exc()}")
        return False

def test_exemples_usage():
    """Affiche des exemples d'utilisation des nouvelles fonctionnalit√©s"""
    print("\n" + "=" * 60)
    print("üìö EXEMPLES D'UTILISATION")
    print("=" * 60)
    
    exemples = [
        {
            'titre': 'üèóÔ∏è Cr√©ation produit b√©ton',
            'instruction': 'Cr√©er un sac de b√©ton pr√©m√©lang√© 25 MPa, 30kg, prix 7.50$, stock 200 sacs, minimum 50',
            'description': 'Cr√©e automatiquement un produit b√©ton avec sp√©cifications techniques'
        },
        {
            'titre': 'üîß Modification prix acier',
            'instruction': 'Augmenter le prix du produit W200x46 de 15% √† cause de l\'inflation',
            'description': 'Calcule et applique automatiquement la nouvelle tarification'
        },
        {
            'titre': 'üìä Analyse isolation',
            'instruction': 'Analyser les performances du produit laine min√©rale R-20',
            'description': 'Fournit insights complets: stock, prix, conformit√©, optimisations'
        },
        {
            'titre': 'üéØ Optimisation globale',
            'instruction': 'Optimiser tout le catalogue produits selon les saisons qu√©b√©coises',
            'description': 'Plan strat√©gique complet avec actions 30/60/90 jours'
        }
    ]
    
    for i, exemple in enumerate(exemples, 1):
        print(f"\n{i}. {exemple['titre']}")
        print(f"   üí¨ Instruction: \"{exemple['instruction']}\"")
        print(f"   üìù R√©sultat: {exemple['description']}")
    
    print(f"\nüí° UTILISATION DANS L'APPLICATION:")
    print("   - Interface chat de l'assistant IA")
    print("   - Commandes vocales en fran√ßais qu√©b√©cois")
    print("   - Int√©gration compl√®te avec la base de donn√©es")
    print("   - Validation automatique des donn√©es")

if __name__ == "__main__":
    print("üöÄ LANCEMENT DES TESTS PRODUITS IA")
    print("Tests des nouvelles fonctionnalit√©s de gestion de produits via IA")
    
    # Lancer les tests
    success = test_assistant_ia_produits()
    
    if success:
        test_exemples_usage()
        print(f"\n‚úÖ SUCC√àS TOTAL - L'assistant IA peut g√©rer les produits!")
    else:
        print(f"\n‚ùå √âCHEC - V√©rifiez la configuration")
    
    print("\nüèÅ Tests termin√©s")