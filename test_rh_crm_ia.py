#!/usr/bin/env python3
# test_rh_crm_ia.py - Tests pour les fonctionnalit√©s IA RH et CRM
# ERP Production DG Inc. - Tests des nouvelles capacit√©s de l'assistant IA pour employ√©s/contacts/entreprises

"""
Tests pour v√©rifier le bon fonctionnement des nouvelles fonctionnalit√©s IA 
pour la cr√©ation et modification d'employ√©s, contacts et entreprises via l'assistant Claude
"""

import os
import sys
import traceback
from pathlib import Path

# Ajouter le r√©pertoire parent au PATH pour les imports
sys.path.append(str(Path(__file__).parent))

def test_assistant_ia_employes():
    """Test des fonctionnalit√©s IA pour les employ√©s"""
    print("üë• TESTS ASSISTANT IA - GESTION EMPLOY√âS")
    print("=" * 60)
    
    try:
        # Imports n√©cessaires
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules employ√©s import√©s avec succ√®s")
        
        # Initialisation
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation employ√© avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation employ√© avec IA...")
        instructions_creation = """
        Cr√©er un employ√© Marc Lavoie, charpentier senior, d√©partement charpente bois.
        Salaire 72000$ annuel, embauch√© aujourd'hui, contrat CDI.
        Comp√©tences: charpenterie r√©sidentielle niveau expert, lecture de plans avanc√©.
        T√©l√©phone 514-555-0123, email marc.lavoie@constructo.ai
        """
        
        resultat = assistant.creer_employe_avec_ia(instructions_creation)
        
        if resultat['success']:
            print("‚úÖ Cr√©ation employ√© IA r√©ussie!")
            print(f"   - Employ√© ID: {resultat.get('employe_id')}")
            print(f"   - Comp√©tences: {resultat.get('nb_competences', 0)}")
            
            employe_id = resultat['employe_id']
            
            # Test modification employ√©
            print("\n2Ô∏è‚É£ Test modification employ√© avec IA...")
            instructions_modif = "Promouvoir Marc √† contrema√Ætre, augmenter salaire √† 78000$ et changer d√©partement √† direction"
            
            resultat_modif = assistant.modifier_employe_avec_ia(employe_id, instructions_modif)
            
            if resultat_modif['success']:
                print("‚úÖ Modification employ√© IA r√©ussie!")
                print(f"   - Modifications: {list(resultat_modif.get('modifications_appliquees', {}).keys())}")
            else:
                print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation: {resultat.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS EMPLOY√âS: {e}")
        return False

def test_assistant_ia_contacts_entreprises():
    """Test des fonctionnalit√©s IA pour contacts et entreprises"""
    print("\nüè¢ TESTS ASSISTANT IA - GESTION CONTACTS/ENTREPRISES")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules CRM import√©s avec succ√®s")
        
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation entreprise avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation entreprise avec IA...")
        instructions_entreprise = """
        Cr√©er une entreprise B√¢tiPro Qu√©bec Inc., entrepreneur g√©n√©ral dans la construction commerciale.
        Adresse: 456 boulevard Saint-Laurent, Montr√©al QC H2X 2V4 Canada.
        Site web: www.batipro.ca
        Notes: Sp√©cialis√© dans les √©difices √† bureaux et centres commerciaux
        """
        
        resultat_ent = assistant.creer_entreprise_avec_ia(instructions_entreprise)
        
        if resultat_ent['success']:
            print("‚úÖ Cr√©ation entreprise IA r√©ussie!")
            print(f"   - Entreprise ID: {resultat_ent.get('entreprise_id')}")
            
            entreprise_id = resultat_ent['entreprise_id']
            
            # Test cr√©ation contact li√© √† l'entreprise
            print("\n2Ô∏è‚É£ Test cr√©ation contact avec IA...")
            instructions_contact = """
            Cr√©er un contact Sophie Tremblay, directrice des op√©rations.
            T√©l√©phone 514-987-6543, email sophie.tremblay@batipro.ca
            Notes: Contact principal pour soumissions commerciales
            """
            
            resultat_contact = assistant.creer_contact_avec_ia(instructions_contact, entreprise_id)
            
            if resultat_contact['success']:
                print("‚úÖ Cr√©ation contact IA r√©ussie!")
                print(f"   - Contact ID: {resultat_contact.get('contact_id')}")
                
                contact_id = resultat_contact['contact_id']
                
                # Test modification contact
                print("\n3Ô∏è‚É£ Test modification contact avec IA...")
                instructions_modif_contact = "Changer le titre √† pr√©sidente et mettre le nouveau t√©l√©phone 514-987-9999"
                
                resultat_modif_contact = assistant.modifier_contact_avec_ia(contact_id, instructions_modif_contact)
                
                if resultat_modif_contact['success']:
                    print("‚úÖ Modification contact IA r√©ussie!")
                else:
                    print(f"‚ùå Erreur modification contact: {resultat_modif_contact.get('error', '')}")
            else:
                print(f"‚ùå Erreur cr√©ation contact: {resultat_contact.get('error', '')}")
            
            # Test modification entreprise
            print("\n4Ô∏è‚É£ Test modification entreprise avec IA...")
            instructions_modif_ent = "Changer l'adresse √† 789 rue de la Gaucheti√®re, Montr√©al QC H3B 2M7"
            
            resultat_modif_ent = assistant.modifier_entreprise_avec_ia(entreprise_id, instructions_modif_ent)
            
            if resultat_modif_ent['success']:
                print("‚úÖ Modification entreprise IA r√©ussie!")
                print(f"   - Modifications: {list(resultat_modif_ent.get('modifications_appliquees', {}).keys())}")
            else:
                print(f"‚ùå Erreur modification entreprise: {resultat_modif_ent.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation entreprise: {resultat_ent.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS CRM: {e}")
        return False

def test_integrite_fonctions():
    """Test d'int√©grit√© de toutes les nouvelles fonctions"""
    print("\nüîß TESTS D'INT√âGRIT√â DES FONCTIONS")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        
        db = ERPDatabase()
        assistant = AssistantIAClaude(db, None)  # Sans API pour test structure
        
        # Fonctions employ√©s
        fonctions_employes = [
            'creer_employe_avec_ia',
            'modifier_employe_avec_ia'
        ]
        
        # Fonctions contacts
        fonctions_contacts = [
            'creer_contact_avec_ia',
            'modifier_contact_avec_ia'
        ]
        
        # Fonctions entreprises
        fonctions_entreprises = [
            'creer_entreprise_avec_ia', 
            'modifier_entreprise_avec_ia'
        ]
        
        toutes_fonctions = fonctions_employes + fonctions_contacts + fonctions_entreprises
        
        for fonction in toutes_fonctions:
            if hasattr(assistant, fonction):
                print(f"   ‚úÖ Fonction {fonction} disponible")
            else:
                print(f"   ‚ùå Fonction {fonction} manquante")
                return False
        
        # Test imports modules
        print("\nüìã Test imports modules...")
        
        try:
            from employees import GestionnaireEmployes, DEPARTEMENTS, COMPETENCES_DISPONIBLES
            print(f"   ‚úÖ Module employ√©s: {len(DEPARTEMENTS)} d√©partements, {len(COMPETENCES_DISPONIBLES)} comp√©tences")
        except ImportError as e:
            print(f"   ‚ùå Erreur import employees: {e}")
            return False
        
        try:
            from crm import GestionnaireCRM, TYPES_ENTREPRISES_CONSTRUCTION, SECTEURS_CONSTRUCTION
            print(f"   ‚úÖ Module CRM: {len(TYPES_ENTREPRISES_CONSTRUCTION)} types entreprises, {len(SECTEURS_CONSTRUCTION)} secteurs")
        except ImportError as e:
            print(f"   ‚ùå Erreur import crm: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS INT√âGRIT√â: {e}")
        return False

def test_exemples_usage():
    """Affiche des exemples d'utilisation des nouvelles fonctionnalit√©s"""
    print("\n" + "=" * 80)
    print("üìö EXEMPLES D'UTILISATION RH & CRM")
    print("=" * 80)
    
    exemples = [
        {
            'categorie': 'üë• EMPLOY√âS',
            'exemples': [
                {
                    'titre': 'Cr√©ation charpentier',
                    'instruction': 'Cr√©er un employ√© Pierre Dubois, charpentier-menuisier, d√©partement chantier, 28$/h',
                    'description': 'Cr√©e automatiquement un employ√© avec comp√©tences et salaire adapt√©'
                },
                {
                    'titre': 'Promotion employ√©',
                    'instruction': 'Promouvoir l\'employ√© EMP-123 √† superviseur avec augmentation 10%',
                    'description': 'Calcule automatiquement nouveau salaire et met √† jour le poste'
                }
            ]
        },
        {
            'categorie': 'üìû CONTACTS',
            'exemples': [
                {
                    'titre': 'Contact client',
                    'instruction': 'Cr√©er contact Marie Bertrand, directrice achats chez B√©ton Plus, 418-555-7890',
                    'description': 'Cr√©e contact professionnel avec validation format qu√©b√©cois'
                },
                {
                    'titre': 'Mise √† jour contact',
                    'instruction': 'Changer l\'email du contact CONT-456 √† nouveau.email@entreprise.com',
                    'description': 'Modifie sp√©cifiquement les champs demand√©s'
                }
            ]
        },
        {
            'categorie': 'üè¢ ENTREPRISES',
            'exemples': [
                {
                    'titre': 'Nouvelle entreprise',
                    'instruction': 'Cr√©er entreprise Toiture Express, sous-traitant sp√©cialis√©, secteur couverture, Qu√©bec QC',
                    'description': 'Structure compl√®te avec adresse qu√©b√©coise et secteur appropri√©'
                },
                {
                    'titre': 'Changement adresse',
                    'instruction': 'D√©m√©nager l\'entreprise COMP-789 au 123 rue Principal, Sherbrooke QC J1H 1A1',
                    'description': 'Met √† jour adresse structur√©e avec validation code postal'
                }
            ]
        }
    ]
    
    for categorie_info in exemples:
        print(f"\n{categorie_info['categorie']}")
        print("-" * 50)
        
        for i, exemple in enumerate(categorie_info['exemples'], 1):
            print(f"\n{i}. {exemple['titre']}")
            print(f"   üí¨ Instruction: \"{exemple['instruction']}\"")
            print(f"   üìù R√©sultat: {exemple['description']}")
    
    print(f"\nüí° UTILISATION DANS L'APPLICATION:")
    print("   - Interface chat de l'assistant IA")
    print("   - Commandes vocales en fran√ßais qu√©b√©cois") 
    print("   - Int√©gration compl√®te avec les modules existants")
    print("   - Validation automatique des donn√©es RH/CRM")
    print("   - Liens automatiques entre contacts et entreprises")

def test_complet_rh_crm():
    """Lance tous les tests pour RH et CRM"""
    print("üöÄ LANCEMENT DES TESTS COMPLETS RH & CRM IA")
    print("=" * 80)
    print("Tests des nouvelles fonctionnalit√©s de gestion RH et CRM via IA")
    
    resultats = []
    
    # Tests employ√©s
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_employes())
    
    # Tests contacts/entreprises
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_contacts_entreprises())
    
    # Tests int√©grit√©
    print(f"\n{'='*80}")
    resultats.append(test_integrite_fonctions())
    
    # R√©sum√© final
    print(f"\n{'='*80}")
    if all(resultats):
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ L'assistant IA peut g√©rer employ√©s, contacts et entreprises!")
        test_exemples_usage()
        return True
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("üîç V√©rifiez la configuration et les d√©pendances")
        return False

if __name__ == "__main__":
    success = test_complet_rh_crm()
    print(f"\nüèÅ Tests termin√©s - {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    
    print(f"\nüìã R√âSUM√â DES NOUVELLES CAPACIT√âS IA:")
    print("   üîπ Cr√©ation automatique d'employ√©s avec comp√©tences")
    print("   üîπ Modification intelligente des donn√©es RH")
    print("   üîπ Gestion compl√®te contacts professionnels") 
    print("   üîπ Cr√©ation/modification entreprises construction")
    print("   üîπ Liaison automatique contacts ‚Üî entreprises")
    print("   üîπ Validation donn√©es qu√©b√©coises (t√©l√©phone, adresses)")
    print("   üîπ Interface conversationnelle naturelle")
    
    if success:
        print(f"\nüéØ L'ASSISTANT IA EST MAINTENANT COMPLET!")
        print("   Peut g√©rer: PROJETS, DEVIS, PRODUITS, EMPLOY√âS, CONTACTS, ENTREPRISES")
        print("   Via instructions en fran√ßais qu√©b√©cois naturel!")