#!/usr/bin/env python3
# test_postes_bons_travail_ia.py - Tests pour les fonctionnalit√©s IA Postes et Bons de Travail
# ERP Production DG Inc. - Tests des nouvelles capacit√©s de l'assistant IA pour postes de travail et bons de travail

"""
Tests pour v√©rifier le bon fonctionnement des nouvelles fonctionnalit√©s IA 
pour la cr√©ation et modification de postes de travail et bons de travail via l'assistant Claude
"""

import os
import sys
import traceback
from pathlib import Path

# Ajouter le r√©pertoire parent au PATH pour les imports
sys.path.append(str(Path(__file__).parent))

def test_assistant_ia_postes_travail():
    """Test des fonctionnalit√©s IA pour les postes de travail"""
    print("üè≠ TESTS ASSISTANT IA - GESTION POSTES DE TRAVAIL")
    print("=" * 60)
    
    try:
        # Imports n√©cessaires
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules postes travail import√©s avec succ√®s")
        
        # Initialisation
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation poste de travail avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation poste de travail avec IA...")
        instructions_creation = """
        Cr√©er un poste de soudage automatis√© Robot ABB GMAW Station 2.
        D√©partement production, cat√©gorie ossature, robot ABB IRB 2600.
        Capacit√© 16 heures par jour, 2 op√©rateurs requis, co√ªt 85$/heure.
        Comp√©tences: Programmation robot ABB, Soudage GMAW-P, Lecture plans structures.
        Localisation: Atelier B - Zone robotis√©e 2, statut actif.
        """
        
        resultat = assistant.creer_poste_travail_avec_ia(instructions_creation)
        
        if resultat['success']:
            print("‚úÖ Cr√©ation poste travail IA r√©ussie!")
            print(f"   - Poste ID: {resultat.get('work_center_id')}")
            print(f"   - Nom: {resultat.get('nom')}")
            print(f"   - D√©partement: {resultat.get('departement')}")
            print(f"   - Cat√©gorie: {resultat.get('categorie')}")
            print(f"   - Capacit√©: {resultat.get('capacite_theorique')}h/jour")
            print(f"   - Co√ªt: {resultat.get('cout_horaire')}$/h")
            
            work_center_id = resultat['work_center_id']
            
            # Test modification poste de travail
            print("\n2Ô∏è‚É£ Test modification poste de travail avec IA...")
            instructions_modif = """
            Passer le poste en maintenance pour r√©vision programm√©e.
            R√©duire la capacit√© √† 8 heures par jour temporairement.
            Augmenter le co√ªt horaire √† 95$ pour inclure frais maintenance.
            """
            
            resultat_modif = assistant.modifier_poste_travail_avec_ia(work_center_id, instructions_modif)
            
            if resultat_modif['success']:
                print("‚úÖ Modification poste travail IA r√©ussie!")
                print(f"   - Modifications: {list(resultat_modif.get('modifications_appliquees', {}).keys())}")
                if resultat_modif.get('modifications_appliquees'):
                    for champ, valeur in resultat_modif['modifications_appliquees'].items():
                        print(f"     ‚Ä¢ {champ}: {valeur}")
            else:
                print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation: {resultat.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS POSTES TRAVAIL: {e}")
        traceback.print_exc()
        return False

def test_assistant_ia_bons_travail():
    """Test des fonctionnalit√©s IA pour les bons de travail"""
    print("\nüìã TESTS ASSISTANT IA - BONS DE TRAVAIL")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules bons travail import√©s avec succ√®s")
        
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation bon de travail avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation bon de travail avec IA...")
        instructions_bt = """
        Cr√©er bon de travail pour assemblage structure m√©tallique projet Tour Horizon.
        Client: Constructions Modernes Inc., charg√© projet: Marie Dubois.
        Priorit√© haute, d√©but lundi prochain, fin dans 2 semaines.
        
        T√¢ches:
        - Pr√©paration mat√©riel et outillage (4h, Jean Tremblay)
        - D√©coupe profil√©s acier selon plans (12h, √©quipe d√©coupe)
        - Soudage assemblage principal (16h, Pierre Martin)
        - Contr√¥le qualit√© et finition (6h, inspecteur qualit√©)
        
        Mat√©riaux:
        - 50 profil√©s HEA 200 de 6m
        - 25kg √©lectrodes E70XX 
        - 10 boulons HR M20x80
        - Peinture anti-corrosion 5L
        
        S√©curit√©: EPI complets, ventilation soudage, espace confin√©.
        Qualit√©: Soudures certifi√©es CWB, contr√¥les par ressuage.
        """
        
        resultat_bt = assistant.creer_bon_travail_avec_ia(instructions_bt)
        
        if resultat_bt['success']:
            print("‚úÖ Cr√©ation bon de travail IA r√©ussie!")
            print(f"   - BT ID: {resultat_bt.get('bt_id')}")
            print(f"   - Num√©ro: {resultat_bt.get('numero_document')}")
            print(f"   - Projet: {resultat_bt.get('project_name')}")
            print(f"   - Priorit√©: {resultat_bt.get('priority')}")
            print(f"   - T√¢ches: {resultat_bt.get('nb_taches', 0)}")
            print(f"   - Mat√©riaux: {resultat_bt.get('nb_materiaux', 0)}")
            print(f"   - Heures planifi√©es: {resultat_bt.get('heures_planifiees', 0)}")
            
            bt_id = resultat_bt['bt_id']
            
            # Test modification bon de travail
            print("\n2Ô∏è‚É£ Test modification bon de travail avec IA...")
            instructions_modif = """
            Ajouter une t√¢che de peinturage final (8h, √©quipe finition).
            Changer la priorit√© √† urgente suite demande client.
            Ajouter 15L de diluant peinture dans les mat√©riaux.
            Modifier les heures de soudage de 16h √† 20h (complexit√© accrue).
            """
            
            resultat_modif = assistant.modifier_bon_travail_avec_ia(bt_id, instructions_modif)
            
            if resultat_modif['success']:
                print("‚úÖ Modification bon de travail IA r√©ussie!")
                print(f"   - Anciennes heures: {resultat_modif.get('anciennes_heures_planifiees', 0)}")
                print(f"   - Nouvelles heures: {resultat_modif.get('nouvelles_heures_planifiees', 0)}")
                print(f"   - Nouveau nb t√¢ches: {resultat_modif.get('nouveau_nb_taches', 0)}")
                print(f"   - Nouveau nb mat√©riaux: {resultat_modif.get('nouveau_nb_materiaux', 0)}")
                
                modifications = resultat_modif.get('modifications_appliquees', {})
                if 'taches_traitees' in modifications:
                    print(f"   - T√¢ches: {modifications['taches_traitees']}")
                if 'materiaux_traites' in modifications:
                    print(f"   - Mat√©riaux: {modifications['materiaux_traites']}")
                
                for champ, valeur in modifications.items():
                    if champ not in ['taches_traitees', 'materiaux_traites']:
                        print(f"   - {champ}: {valeur}")
            else:
                print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation bon travail: {resultat_bt.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS BONS TRAVAIL: {e}")
        traceback.print_exc()
        return False

def test_integrite_fonctions_postes_bt():
    """Test d'int√©grit√© de toutes les nouvelles fonctions postes et BT"""
    print("\nüîß TESTS D'INT√âGRIT√â POSTES & BONS TRAVAIL")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        
        db = ERPDatabase()
        assistant = AssistantIAClaude(db, None)  # Sans API pour test structure
        
        # Fonctions postes de travail
        fonctions_postes = [
            'creer_poste_travail_avec_ia',
            'modifier_poste_travail_avec_ia'
        ]
        
        # Fonctions bons de travail
        fonctions_bt = [
            'creer_bon_travail_avec_ia',
            'modifier_bon_travail_avec_ia'
        ]
        
        toutes_fonctions = fonctions_postes + fonctions_bt
        
        print(f"\nüìã Test disponibilit√© fonctions ({len(toutes_fonctions)} fonctions)...")
        for fonction in toutes_fonctions:
            if hasattr(assistant, fonction):
                print(f"   ‚úÖ Fonction {fonction} disponible")
            else:
                print(f"   ‚ùå Fonction {fonction} manquante")
                return False
        
        # Test imports modules production
        print(f"\nüìã Test imports modules production...")
        
        try:
            from production_management import GestionnaireFormulaires
            print(f"   ‚úÖ Module production_management: GestionnaireFormulaires import√©")
        except ImportError as e:
            print(f"   ‚ùå Erreur import production_management: {e}")
            return False
        
        # V√©rifier les structures de donn√©es cl√©s
        print(f"\nüìã Test structures donn√©es postes/BT...")
        
        # Test tables postes et formulaires
        tables_requises = [
            'work_centers',
            'formulaires',
            'formulaire_lignes',
            'operations'
        ]
        
        for table in tables_requises:
            try:
                result = db.execute_query(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
                if result:
                    print(f"   ‚úÖ Table {table} existe")
                else:
                    print(f"   ‚ö†Ô∏è Table {table} non trouv√©e")
            except Exception as e:
                print(f"   ‚ùå Erreur v√©rification table {table}: {e}")
        
        # Test m√©thodes ERP Database
        methodes_requises = [
            'add_work_center',
            'update_work_center', 
            'get_work_center_by_id'
        ]
        
        for methode in methodes_requises:
            if hasattr(db, methode):
                print(f"   ‚úÖ M√©thode DB {methode} disponible")
            else:
                print(f"   ‚ùå M√©thode DB {methode} manquante")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS INT√âGRIT√â: {e}")
        traceback.print_exc()
        return False

def test_exemples_usage_postes_bt():
    """Affiche des exemples d'utilisation des nouvelles fonctionnalit√©s"""
    print("\n" + "=" * 80)
    print("üìö EXEMPLES D'UTILISATION POSTES & BONS DE TRAVAIL")
    print("=" * 80)
    
    exemples = [
        {
            'categorie': 'üè≠ POSTES DE TRAVAIL',
            'exemples': [
                {
                    'titre': 'Nouveau poste CNC',
                    'instruction': 'Cr√©er poste tournage CNC Haas ST-30, production m√©canique, 2 op√©rateurs, 75$/h, Atelier A Zone 3',
                    'description': 'G√©n√®re poste avec toutes sp√©cifications techniques et contraintes op√©rationnelles'
                },
                {
                    'titre': 'Maintenance programm√©e',
                    'instruction': 'Mettre le poste WELD-002 en maintenance, r√©duire capacit√© 4h/jour, noter r√©vision annuelle',
                    'description': 'Ajuste automatiquement statut, capacit√© et ajoute notes maintenance'
                }
            ]
        },
        {
            'categorie': 'üìã BONS DE TRAVAIL',
            'exemples': [
                {
                    'titre': 'BT fabrication charpente',
                    'instruction': 'BT pour charpente acier projet √âcole Secondaire, 5 t√¢ches soudage, mat√©riaux HEA 240, priorit√© normale',
                    'description': 'Cr√©e BT complet avec t√¢ches d√©taill√©es, mat√©riaux structur√©s, liens projet'
                },
                {
                    'titre': 'Modification urgence',
                    'instruction': 'Ajouter t√¢che galvanisation au BT-2024-001, passer priorit√© urgente, 12h suppl√©mentaires',
                    'description': 'Modifie BT existant avec nouvelles t√¢ches et recalcule automatiquement totaux'
                }
            ]
        },
        {
            'categorie': 'üîó INT√âGRATION SYST√àME',
            'exemples': [
                {
                    'titre': 'Liaison projets',
                    'instruction': 'Cr√©er BT li√© au projet PROJ-123 avec assignation √©quipe selon disponibilit√©s',
                    'description': 'Int√®gre automatiquement donn√©es projet, clients, et ressources disponibles'
                },
                {
                    'titre': 'Suivi capacit√©',
                    'instruction': 'Cr√©er poste avec suivi temps r√©el et alertes d√©passement capacit√© th√©orique',
                    'description': 'Configure monitoring automatique charge travail et alertes pr√©ventives'
                }
            ]
        }
    ]
    
    for categorie_info in exemples:
        print(f"\n{categorie_info['categorie']}")
        print("-" * 50)
        
        for i, exemple in enumerate(categorie_info['exemples'], 1):
            print(f"\n{i}. {exemple['titre']}")
            print(f"   üí¨ Instruction: \"{exemple['instruction']}\"")
            print(f"   üìù R√©sultat: {exemple['description']}")
    
    print(f"\nüí° AVANTAGES POSTES & BONS TRAVAIL IA:")
    print("   - Configuration rapide postes avec validations m√©tier automatiques")
    print("   - G√©n√©ration BT structur√©s avec liens projets/ressources")
    print("   - Modification intelligente avec pr√©servation coh√©rence donn√©es")
    print("   - Int√©gration native avec modules ERP (projets, employ√©s, mat√©riaux)")
    print("   - Validation automatique contraintes production qu√©b√©coises")
    print("   - Interface conversationnelle naturelle fran√ßais construction")

def test_scenarios_avances():
    """Tests de sc√©narios avanc√©s d'utilisation"""
    print("\nüéØ TESTS SC√âNARIOS AVANC√âS")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests avanc√©s saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        print("\n1Ô∏è‚É£ Sc√©nario: Configuration compl√®te atelier...")
        # Test cr√©ation multiple postes pour un atelier complet
        postes_atelier = [
            "Poste d√©coupe plasma Hypertherm, production, 12h/jour, op√©rateur certifi√© d√©coupe",
            "Station assemblage manuel, 8h/jour, 3 soudeurs, outillage complet, Zone A",
            "Poste contr√¥le dimensionnel, qualit√©, √©quipements m√©trologie, inspecteur niveau 2"
        ]
        
        postes_crees = []
        for i, instruction in enumerate(postes_atelier, 1):
            print(f"   Cr√©ation poste {i}/3...")
            resultat = assistant.creer_poste_travail_avec_ia(instruction)
            if resultat['success']:
                postes_crees.append(resultat['work_center_id'])
                print(f"   ‚úÖ Poste {i} cr√©√©: {resultat.get('nom')}")
            else:
                print(f"   ‚ùå √âchec poste {i}: {resultat.get('error')}")
        
        if len(postes_crees) >= 2:
            print(f"\n‚úÖ Sc√©nario atelier r√©ussi: {len(postes_crees)} postes cr√©√©s")
        else:
            print(f"\n‚ö†Ô∏è Sc√©nario atelier partiel: {len(postes_crees)} postes cr√©√©s")
        
        print("\n2Ô∏è‚É£ Sc√©nario: BT complexe multi-phases...")
        # Test BT avec nombreuses t√¢ches et mat√©riaux
        instruction_bt_complexe = """
        BT production escalier h√©lico√Ødal sur mesure, priorit√© haute.
        
        Phase 1 - Pr√©paration (2 jours):
        - Analyse plans et calculs (4h, ing√©nieur)
        - Commande mat√©riaux sp√©ciaux (2h, acheteur)
        - Pr√©paration outillage cintrage (6h, outilleur)
        
        Phase 2 - Fabrication (5 jours):
        - Cintrage limons acier (16h, op√©rateur cintrage)  
        - D√©coupe marches sur mesure (12h, d√©coupe CNC)
        - Soudage assemblage principal (24h, 2 soudeurs)
        - Montage garde-corps (8h, assembleur)
        
        Phase 3 - Finition (2 jours):
        - Meulage et finition (10h, finisseur)
        - Appr√™t et peinture (8h, peintre)
        - Contr√¥le final et emballage (4h, contr√¥leur)
        
        Mat√©riaux sp√©ciaux:
        - 2 limons acier 300x15mm, longueur 8m
        - 15 marches acier perfor√© sur mesure
        - Kit garde-corps inox avec fixations
        - Peinture architecturale 3L, couleur RAL 7016
        - Visserie inox A4 compl√®te
        
        S√©curit√©: Travail hauteur, manutention lourde, espaces confin√©s.
        Qualit√©: Soudures CWB classe 1, dimensions ¬±2mm, finition architecturale.
        """
        
        resultat_bt_complexe = assistant.creer_bon_travail_avec_ia(instruction_bt_complexe)
        
        if resultat_bt_complexe['success']:
            print("‚úÖ BT complexe cr√©√© avec succ√®s!")
            print(f"   - T√¢ches: {resultat_bt_complexe.get('nb_taches', 0)}")
            print(f"   - Mat√©riaux: {resultat_bt_complexe.get('nb_materiaux', 0)}")
            print(f"   - Heures totales: {resultat_bt_complexe.get('heures_planifiees', 0)}")
            
            # Test modification complexe
            print("\n   Test modification complexe...")
            modif_complexe = """
            Ajouter phase 4 - Livraison et installation:
            - Transport s√©curis√© (4h, chauffeur sp√©cialis√©)
            - Installation sur site (16h, 2 monteurs certifi√©s)  
            - Formation client utilisation (2h, technicien)
            
            Modifier phase 2: augmenter soudage √† 32h (complexit√© accrue).
            Ajouter mat√©riau: kit transport et protection 1 ensemble.
            Passer priorit√© √† urgente (demande client).
            """
            
            resultat_modif = assistant.modifier_bon_travail_avec_ia(resultat_bt_complexe['bt_id'], modif_complexe)
            
            if resultat_modif['success']:
                print("‚úÖ Modification complexe r√©ussie!")
                print(f"   - Delta heures: +{resultat_modif.get('nouvelles_heures_planifiees', 0) - resultat_modif.get('anciennes_heures_planifiees', 0)}")
                print(f"   - Nouvelles t√¢ches: {resultat_modif.get('nouveau_nb_taches', 0)}")
            else:
                print(f"‚ùå Erreur modification complexe: {resultat_modif.get('error')}")
        else:
            print(f"‚ùå √âchec BT complexe: {resultat_bt_complexe.get('error')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS AVANC√âS: {e}")
        traceback.print_exc()
        return False

def test_complet_postes_bons_travail():
    """Lance tous les tests pour Postes et Bons de Travail IA"""
    print("üöÄ LANCEMENT DES TESTS COMPLETS POSTES & BONS TRAVAIL IA")
    print("=" * 80)
    print("Tests des nouvelles fonctionnalit√©s de gestion Production via IA")
    
    resultats = []
    
    # Tests postes de travail
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_postes_travail())
    
    # Tests bons de travail
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_bons_travail())
    
    # Tests int√©grit√©
    print(f"\n{'='*80}")
    resultats.append(test_integrite_fonctions_postes_bt())
    
    # Tests sc√©narios avanc√©s
    print(f"\n{'='*80}")
    resultats.append(test_scenarios_avances())
    
    # R√©sum√© final
    print(f"\n{'='*80}")
    if all(resultats):
        print("üéâ TOUS LES TESTS POSTES & BONS TRAVAIL R√âUSSIS!")
        print("‚úÖ L'assistant IA peut g√©rer la production compl√®tement!")
        test_exemples_usage_postes_bt()
        return True
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("üîç V√©rifiez la configuration et les d√©pendances production")
        return False

if __name__ == "__main__":
    success = test_complet_postes_bons_travail()
    print(f"\nüèÅ Tests Production termin√©s - {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    
    print(f"\nüìã R√âSUM√â DES NOUVELLES CAPACIT√âS PRODUCTION IA:")
    print("   üîπ Cr√©ation automatique postes travail avec contraintes techniques")
    print("   üîπ Configuration intelligente capacit√©s et co√ªts horaires") 
    print("   üîπ G√©n√©ration bons travail multi-phases structur√©s")
    print("   üîπ Modification dynamique t√¢ches et mat√©riaux avec validation")
    print("   üîπ Liaison automatique projets ‚Üî bons travail ‚Üî postes")
    print("   üîπ Calculs automatiques heures, co√ªts et planning")
    print("   üîπ Validation contraintes production qu√©b√©coises")
    print("   üîπ Interface conversationnelle sp√©cialis√©e construction")
    
    if success:
        print(f"\nüéØ L'ASSISTANT IA PRODUCTION EST OP√âRATIONNEL!")
        print("   Peut g√©rer: POSTES DE TRAVAIL, BONS DE TRAVAIL")
        print("   Int√©gration compl√®te avec: PROJETS, EMPLOY√âS, MAT√âRIAUX, FOURNISSEURS")
        print("   Via instructions en fran√ßais qu√©b√©cois naturel!")
        print(f"\nüåü L'ERP EST MAINTENANT 100% G√âR√â PAR IA!")
        print("   Modules IA complets: PROJETS + DEVIS + PRODUITS + RH + CRM + SUPPLY CHAIN + PRODUCTION")
        print("   L'assistant IA couvre TOUS les aspects de l'entreprise de construction!")