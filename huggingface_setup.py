#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'initialisation pour Hugging Face Spaces
Copie la base de donn√©es depuis GitHub Releases si n√©cessaire
"""

import os
import sys
import requests
import sqlite3
import shutil
from datetime import datetime
from pathlib import Path

def is_huggingface_environment():
    """D√©tecte si on est sur Hugging Face"""
    return (os.environ.get('SPACE_ID') or 
            '/home/user' in os.getcwd() or 
            'spaces' in os.getcwd().lower())

def get_database_info():
    """R√©cup√®re les informations sur la base de donn√©es"""
    from database_config import get_database_path, detect_environment
    
    db_path = get_database_path()
    environment = detect_environment()
    
    return {
        'path': db_path,
        'exists': os.path.exists(db_path),
        'environment': environment,
        'is_temp': '/tmp' in db_path
    }

def download_backup_from_github():
    """T√©l√©charge la derni√®re sauvegarde depuis GitHub Releases"""
    
    # Configuration GitHub (ajustez selon votre repo)
    github_repo = "Estimation79/gestion-projets-dg"  # √Ä ajuster
    github_api_url = "https://api.github.com"
    
    print("üîç Recherche de la derni√®re sauvegarde GitHub...")
    
    try:
        # R√©cup√©rer la liste des releases
        releases_url = f"{github_api_url}/repos/{github_repo}/releases"
        response = requests.get(releases_url, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå Erreur acc√®s GitHub: {response.status_code}")
            return None
        
        releases = response.json()
        
        # Chercher les releases de backup
        backup_releases = [r for r in releases if r['tag_name'].startswith('backup-')]
        
        if not backup_releases:
            print("‚ùå Aucune sauvegarde trouv√©e sur GitHub")
            return None
        
        # Prendre la plus r√©cente
        latest_release = backup_releases[0]
        print(f"üì¶ Derni√®re sauvegarde trouv√©e: {latest_release['name']}")
        
        # Chercher le fichier ZIP de backup
        backup_asset = None
        for asset in latest_release.get('assets', []):
            if asset['name'].endswith('.zip') and 'backup' in asset['name']:
                backup_asset = asset
                break
        
        if not backup_asset:
            print("‚ùå Fichier de sauvegarde non trouv√© dans la release")
            return None
        
        download_url = backup_asset['browser_download_url']
        backup_filename = backup_asset['name']
        
        print(f"‚¨áÔ∏è T√©l√©chargement: {backup_filename} ({backup_asset['size']} bytes)")
        
        # T√©l√©charger le fichier
        download_response = requests.get(download_url, timeout=120)
        
        if download_response.status_code != 200:
            print(f"‚ùå Erreur t√©l√©chargement: {download_response.status_code}")
            return None
        
        # Sauvegarder temporairement
        temp_zip_path = f"/tmp/{backup_filename}"
        with open(temp_zip_path, 'wb') as f:
            f.write(download_response.content)
        
        print(f"‚úÖ Sauvegarde t√©l√©charg√©e: {temp_zip_path}")
        return temp_zip_path
        
    except Exception as e:
        print(f"‚ùå Erreur t√©l√©chargement GitHub: {e}")
        return None

def extract_database_from_backup(zip_path, target_db_path):
    """Extrait la base de donn√©es du fichier ZIP"""
    
    import zipfile
    
    try:
        print(f"üìÇ Extraction de la base de donn√©es...")
        
        with zipfile.ZipFile(zip_path, 'r') as zipf:
            # Chercher le fichier .db dans le ZIP
            db_files = [f for f in zipf.namelist() if f.endswith('.db')]
            
            if not db_files:
                print("‚ùå Aucun fichier .db trouv√© dans la sauvegarde")
                return False
            
            db_file = db_files[0]  # Prendre le premier fichier .db
            print(f"üìÑ Fichier trouv√©: {db_file}")
            
            # Extraire vers le chemin cible
            target_dir = os.path.dirname(target_db_path)
            os.makedirs(target_dir, exist_ok=True)
            
            # Extraire et renommer
            zipf.extract(db_file, target_dir)
            extracted_path = os.path.join(target_dir, db_file)
            
            if extracted_path != target_db_path:
                shutil.move(extracted_path, target_db_path)
            
            print(f"‚úÖ Base de donn√©es restaur√©e: {target_db_path}")
            
            # V√©rifier l'int√©grit√©
            return verify_database_integrity(target_db_path)
            
    except Exception as e:
        print(f"‚ùå Erreur extraction: {e}")
        return False

def verify_database_integrity(db_path):
    """V√©rifie l'int√©grit√© de la base de donn√©es"""
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Test d'int√©grit√© SQLite
        cursor.execute("PRAGMA integrity_check")
        integrity_result = cursor.fetchone()
        
        # Compter les tables
        cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
        table_count = cursor.fetchone()[0]
        
        conn.close()
        
        if integrity_result[0] == 'ok' and table_count > 0:
            print(f"‚úÖ Base int√®gre: {table_count} tables")
            return True
        else:
            print(f"‚ùå Probl√®me int√©grit√©: {integrity_result[0]}, {table_count} tables")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False

def setup_huggingface_persistence():
    """Configuration principale pour Hugging Face"""
    
    print("üöÄ SETUP HUGGING FACE - ERP CONSTRUCTO AI")
    print("=" * 60)
    
    if not is_huggingface_environment():
        print("‚ùå Ce script est con√ßu pour Hugging Face Spaces")
        return False
    
    # Informations sur la base de donn√©es
    db_info = get_database_info()
    
    print(f"üìä Environnement: {db_info['environment']}")
    print(f"üìÅ Chemin DB: {db_info['path']}")
    print(f"üíæ Existe: {db_info['exists']}")
    print(f"‚ö†Ô∏è Temporaire: {db_info['is_temp']}")
    
    # Si la base existe d√©j√† et n'est pas temporaire, tout va bien
    if db_info['exists'] and not db_info['is_temp']:
        print("‚úÖ Base de donn√©es persistante d√©j√† configur√©e")
        return True
    
    # Si la base n'existe pas ou est temporaire, essayer de restaurer depuis GitHub
    if not db_info['exists'] or db_info['is_temp']:
        print("üîÑ Tentative de restauration depuis GitHub...")
        
        backup_zip = download_backup_from_github()
        
        if backup_zip:
            success = extract_database_from_backup(backup_zip, db_info['path'])
            
            # Nettoyage
            try:
                os.remove(backup_zip)
            except:
                pass
            
            if success:
                print("üéâ Restauration r√©ussie depuis GitHub!")
                return True
        
        print("‚ö†Ô∏è Impossible de restaurer depuis GitHub")
        print("üí° L'application va cr√©er une nouvelle base de donn√©es")
        
        if db_info['is_temp']:
            print("üö® ATTENTION: Stockage temporaire - donn√©es perdues au red√©marrage")
    
    return True

def create_hf_requirements():
    """Cr√©e un fichier requirements.txt optimis√© pour HF si n√©cessaire"""
    
    if os.path.exists("requirements.txt"):
        return  # Le fichier existe d√©j√†
    
    hf_requirements = """
streamlit>=1.28.0
pandas>=1.5.0
plotly>=5.15.0
sqlite3
anthropic>=0.5.0
requests>=2.28.0
Pillow>=9.0.0
PyPDF2>=3.0.0
python-docx>=0.8.11
schedule>=1.2.0
pytz>=2023.3
beautifulsoup4>=4.11.0
""".strip()
    
    with open("requirements.txt", "w") as f:
        f.write(hf_requirements)
    
    print("‚úÖ requirements.txt cr√©√© pour Hugging Face")

def main():
    """Fonction principale"""
    try:
        create_hf_requirements()
        return setup_huggingface_persistence()
    except Exception as e:
        print(f"‚ùå Erreur setup: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)