#!/usr/bin/env python3
# test_supply_chain_ia.py - Tests pour les fonctionnalit√©s IA Supply Chain
# ERP Production DG Inc. - Tests des nouvelles capacit√©s de l'assistant IA pour fournisseurs/demandes prix/bons d'achat

"""
Tests pour v√©rifier le bon fonctionnement des nouvelles fonctionnalit√©s IA 
pour la cr√©ation et modification de fournisseurs, demandes de prix et bons d'achat via l'assistant Claude
"""

import os
import sys
import traceback
from pathlib import Path

# Ajouter le r√©pertoire parent au PATH pour les imports
sys.path.append(str(Path(__file__).parent))

def test_assistant_ia_fournisseurs():
    """Test des fonctionnalit√©s IA pour les fournisseurs"""
    print("üè≠ TESTS ASSISTANT IA - GESTION FOURNISSEURS")
    print("=" * 60)
    
    try:
        # Imports n√©cessaires
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules fournisseurs import√©s avec succ√®s")
        
        # Initialisation
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation fournisseur avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation fournisseur avec IA...")
        instructions_creation = """
        Cr√©er un fournisseur Mat√©riaux Nord-Est Inc., sp√©cialis√© en b√©ton et granulats.
        Adresse: 1250 boulevard Industriel, Qu√©bec QC G1N 2V9
        Contact: Jean-Fran√ßois Dubois, t√©l√©phone 418-555-0147
        Email: jf.dubois@materiaux-ne.ca, site web: www.materiaux-ne.ca
        D√©lai paiement 45 jours, remise 3.5%, certifi√© CSA et BNQ
        Notes: Fournisseur fiable depuis 15 ans, livraison rapide r√©gion Qu√©bec
        """
        
        resultat = assistant.creer_fournisseur_avec_ia(instructions_creation)
        
        if resultat['success']:
            print("‚úÖ Cr√©ation fournisseur IA r√©ussie!")
            print(f"   - Fournisseur ID: {resultat.get('fournisseur_id')}")
            print(f"   - Nom: {resultat.get('nom')}")
            print(f"   - Cat√©gories: {resultat.get('nb_categories', 0)}")
            print(f"   - Certifications: {resultat.get('nb_certifications', 0)}")
            
            fournisseur_id = resultat['fournisseur_id']
            
            # Test modification fournisseur
            print("\n2Ô∏è‚É£ Test modification fournisseur avec IA...")
            instructions_modif = """
            Changer l'adresse pour 2500 route de l'Industrie, L√©vis QC G6W 5M6
            et augmenter la remise √† 5.0%. Ajouter certification RBQ.
            """
            
            resultat_modif = assistant.modifier_fournisseur_avec_ia(fournisseur_id, instructions_modif)
            
            if resultat_modif['success']:
                print("‚úÖ Modification fournisseur IA r√©ussie!")
                print(f"   - Modifications: {list(resultat_modif.get('modifications_appliquees', {}).keys())}")
            else:
                print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation: {resultat.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS FOURNISSEURS: {e}")
        return False

def test_assistant_ia_demandes_prix():
    """Test des fonctionnalit√©s IA pour les demandes de prix"""
    print("\nüìã TESTS ASSISTANT IA - DEMANDES DE PRIX")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules demandes prix import√©s avec succ√®s")
        
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation demande de prix avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation demande prix avec IA...")
        instructions_demande = """
        Cr√©er une demande de prix pour b√©ton pr√™t-m√©lang√© projet r√©sidentiel.
        Besoin de 150 m¬≥ b√©ton 35 MPa, 50 m¬≥ b√©ton 30 MPa pour fondations.
        Date limite r√©ponse: dans 10 jours.
        Conditions: livraison √©chelonn√©e sur 3 semaines, acc√®s camion-malaxeur requis.
        Sp√©cifications: conformit√© CSA A23.1, r√©sistance au gel certifi√©e.
        """
        
        resultat_demande = assistant.creer_demande_prix_avec_ia(instructions_demande)
        
        if resultat_demande['success']:
            print("‚úÖ Cr√©ation demande prix IA r√©ussie!")
            print(f"   - Form ID: {resultat_demande.get('form_id')}")
            print(f"   - Type: {resultat_demande.get('type')}")
            print(f"   - Fournisseur: {resultat_demande.get('supplier_id')}")
            print(f"   - Lignes: {resultat_demande.get('nb_lignes', 0)}")
            print(f"   - Titre: {resultat_demande.get('titre')}")
            
            form_id = resultat_demande['form_id']
            
            # Test modification demande prix
            print("\n2Ô∏è‚É£ Test modification demande prix avec IA...")
            instructions_modif = """
            Ajouter 25 m¬≥ de b√©ton 25 MPa pour dalle et changer la date limite √† dans 14 jours.
            Pr√©ciser que la livraison se fera sur le chantier au 123 rue des √ârables, L√©vis.
            """
            
            resultat_modif = assistant.modifier_demande_prix_avec_ia(form_id, instructions_modif)
            
            if resultat_modif['success']:
                print("‚úÖ Modification demande prix IA r√©ussie!")
                print(f"   - Modifications: {list(resultat_modif.get('modifications_appliquees', {}).keys())}")
                if 'lignes_traitees' in resultat_modif.get('modifications_appliquees', {}):
                    print(f"   - Lignes trait√©es: {resultat_modif['modifications_appliquees']['lignes_traitees']}")
            else:
                print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation demande: {resultat_demande.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS DEMANDES PRIX: {e}")
        return False

def test_assistant_ia_bons_achat():
    """Test des fonctionnalit√©s IA pour les bons d'achat"""
    print("\nüõí TESTS ASSISTANT IA - BONS D'ACHAT")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        from auth_config import get_claude_api_key
        
        print("üì¶ Modules bons d'achat import√©s avec succ√®s")
        
        db = ERPDatabase()
        api_key = get_claude_api_key()
        
        if not api_key:
            print("‚ö†Ô∏è Tests IA saut√©s - pas de cl√© API Claude")
            return True
        
        assistant = AssistantIAClaude(db, api_key)
        
        # Test cr√©ation bon d'achat avec IA
        print("\n1Ô∏è‚É£ Test cr√©ation bon achat avec IA...")
        instructions_bon = """
        Cr√©er bon d'achat mat√©riaux isolation projet r√©sidentiel.
        Commander 500 panneaux isolant polyur√©thane 2x4 pieds √† 25$ chacun,
        100 rouleaux laine min√©rale R-20 √† 45$ le rouleau,
        25 tubes scellant polyur√©thane √† 12$ l'unit√©.
        Livraison souhait√©e dans 5 jours au 456 chemin du Chantier, Beauport QC G1E 2A3.
        Conditions: paiement 30 jours net, mat√©riaux prot√©g√©s contre l'humidit√©.
        """
        
        resultat_bon = assistant.creer_bon_achat_avec_ia(instructions_bon)
        
        if resultat_bon['success']:
            print("‚úÖ Cr√©ation bon d'achat IA r√©ussie!")
            print(f"   - Form ID: {resultat_bon.get('form_id')}")
            print(f"   - Type: {resultat_bon.get('type')}")
            print(f"   - Fournisseur: {resultat_bon.get('supplier_id')}")
            print(f"   - Lignes: {resultat_bon.get('nb_lignes', 0)}")
            print(f"   - Total estim√©: {resultat_bon.get('total_estime', 0):.2f}$")
            print(f"   - Titre: {resultat_bon.get('titre')}")
            
            form_id = resultat_bon['form_id']
            
            # Test modification bon d'achat
            print("\n2Ô∏è‚É£ Test modification bon achat avec IA...")
            instructions_modif = """
            Ajouter 50 tubes adh√©sif construction √† 8$ l'unit√©.
            Changer la date de livraison √† dans 7 jours et 
            modifier l'adresse pour 789 rue de la Construction, Qu√©bec QC G1N 4B5.
            """
            
            resultat_modif = assistant.modifier_bon_achat_avec_ia(form_id, instructions_modif)
            
            if resultat_modif['success']:
                print("‚úÖ Modification bon d'achat IA r√©ussie!")
                print(f"   - Ancien total: {resultat_modif.get('ancien_total', 0):.2f}$")
                print(f"   - Nouveau total: {resultat_modif.get('nouveau_total', 0):.2f}$")
                print(f"   - Modifications: {list(resultat_modif.get('modifications_appliquees', {}).keys())}")
                if 'lignes_traitees' in resultat_modif.get('modifications_appliquees', {}):
                    print(f"   - Lignes trait√©es: {resultat_modif['modifications_appliquees']['lignes_traitees']}")
            else:
                print(f"‚ùå Erreur modification: {resultat_modif.get('error', '')}")
        else:
            print(f"‚ùå Erreur cr√©ation bon d'achat: {resultat_bon.get('error', '')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS BONS ACHAT: {e}")
        return False

def test_integrite_fonctions_supply_chain():
    """Test d'int√©grit√© de toutes les nouvelles fonctions supply chain"""
    print("\nüîß TESTS D'INT√âGRIT√â SUPPLY CHAIN")
    print("=" * 60)
    
    try:
        from erp_database import ERPDatabase
        from assistant_ia import AssistantIAClaude
        
        db = ERPDatabase()
        assistant = AssistantIAClaude(db, None)  # Sans API pour test structure
        
        # Fonctions fournisseurs
        fonctions_fournisseurs = [
            'creer_fournisseur_avec_ia',
            'modifier_fournisseur_avec_ia'
        ]
        
        # Fonctions demandes prix
        fonctions_demandes = [
            'creer_demande_prix_avec_ia',
            'modifier_demande_prix_avec_ia'
        ]
        
        # Fonctions bons achat
        fonctions_bons = [
            'creer_bon_achat_avec_ia',
            'modifier_bon_achat_avec_ia'
        ]
        
        toutes_fonctions = fonctions_fournisseurs + fonctions_demandes + fonctions_bons
        
        print(f"\nüìã Test disponibilit√© fonctions ({len(toutes_fonctions)} fonctions)...")
        for fonction in toutes_fonctions:
            if hasattr(assistant, fonction):
                print(f"   ‚úÖ Fonction {fonction} disponible")
            else:
                print(f"   ‚ùå Fonction {fonction} manquante")
                return False
        
        # Test imports modules supply chain
        print(f"\nüìã Test imports modules supply chain...")
        
        try:
            from fournisseurs import GestionnaireFournisseurs, CATEGORIES_CONSTRUCTION, CERTIFICATIONS_CONSTRUCTION
            print(f"   ‚úÖ Module fournisseurs: {len(CATEGORIES_CONSTRUCTION)} cat√©gories, {len(CERTIFICATIONS_CONSTRUCTION)} certifications")
        except ImportError as e:
            print(f"   ‚ùå Erreur import fournisseurs: {e}")
            return False
        
        # V√©rifier les structures de donn√©es cl√©s
        print(f"\nüìã Test structures donn√©es supply chain...")
        
        # Test tables fournisseurs
        tables_requises = [
            'suppliers',
            'supplier_categories', 
            'supplier_certifications',
            'supplier_forms',
            'supplier_form_lines'
        ]
        
        for table in tables_requises:
            try:
                result = db.execute_query(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
                if result:
                    print(f"   ‚úÖ Table {table} existe")
                else:
                    print(f"   ‚ö†Ô∏è Table {table} non trouv√©e")
            except Exception as e:
                print(f"   ‚ùå Erreur v√©rification table {table}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TESTS INT√âGRIT√â SUPPLY CHAIN: {e}")
        return False

def test_exemples_usage_supply_chain():
    """Affiche des exemples d'utilisation des nouvelles fonctionnalit√©s supply chain"""
    print("\n" + "=" * 80)
    print("üìö EXEMPLES D'UTILISATION SUPPLY CHAIN")
    print("=" * 80)
    
    exemples = [
        {
            'categorie': 'üè≠ FOURNISSEURS',
            'exemples': [
                {
                    'titre': 'Nouveau fournisseur b√©ton',
                    'instruction': 'Cr√©er fournisseur B√©ton Plus, sp√©cialis√© b√©ton pr√™t-m√©lang√©, Montr√©al, contact Pierre Martin 514-555-9876',
                    'description': 'Cr√©e automatiquement avec cat√©gories construction et coordonn√©es qu√©b√©coises'
                },
                {
                    'titre': 'Modification coordonn√©es',
                    'instruction': 'Changer le t√©l√©phone du fournisseur FOUR-123 √† 418-555-4321 et ajouter certification BNQ',
                    'description': 'Met √† jour sp√©cifiquement les champs demand√©s avec validation'
                }
            ]
        },
        {
            'categorie': 'üìã DEMANDES DE PRIX',
            'exemples': [
                {
                    'titre': 'Demande mat√©riaux toiture',
                    'instruction': 'Demander prix 200 feuilles contreplaqu√© OSB 4x8, 50 rouleaux membrane, livraison chantier L√©vis',
                    'description': 'G√©n√®re demande structur√©e avec lignes d√©taill√©es et conditions'
                },
                {
                    'titre': 'Modification quantit√©s',
                    'instruction': 'Modifier demande DP-456: augmenter OSB √† 250 feuilles et ajouter 25 tubes scellant',
                    'description': 'Ajuste quantit√©s existantes et ajoute nouveaux articles automatiquement'
                }
            ]
        },
        {
            'categorie': 'üõí BONS D\'ACHAT',
            'exemples': [
                {
                    'titre': 'Commande isolant',
                    'instruction': 'Commander 100 panneaux isolant XPS 2 pouces √† 28$ chacun, livraison 123 rue Principale Qu√©bec',
                    'description': 'Cr√©e bon d\'achat avec calcul automatique du total et adresse livraison'
                },
                {
                    'titre': 'Ajout article urgent',
                    'instruction': 'Ajouter au bon BA-789: 20 tubes colle PL √† 15$ l\'unit√©, livraison express demain',
                    'description': 'Ajoute articles et recalcule automatiquement le total de commande'
                }
            ]
        }
    ]
    
    for categorie_info in exemples:
        print(f"\n{categorie_info['categorie']}")
        print("-" * 50)
        
        for i, exemple in enumerate(categorie_info['exemples'], 1):
            print(f"\n{i}. {exemple['titre']}")
            print(f"   üí¨ Instruction: \"{exemple['instruction']}\"")
            print(f"   üìù R√©sultat: {exemple['description']}")
    
    print(f"\nüí° AVANTAGES SUPPLY CHAIN IA:")
    print("   - Cr√©ation rapide fournisseurs avec validation donn√©es qu√©b√©coises")
    print("   - G√©n√©ration automatique demandes prix structur√©es")
    print("   - Bons d'achat avec calcul automatique des totaux")
    print("   - Liaison intelligente fournisseurs ‚Üî produits ‚Üî projets")
    print("   - Interface conversationnelle naturelle en fran√ßais")
    print("   - Respect automatique des standards construction qu√©b√©cois")

def test_complet_supply_chain():
    """Lance tous les tests pour Supply Chain IA"""
    print("üöÄ LANCEMENT DES TESTS COMPLETS SUPPLY CHAIN IA")
    print("=" * 80)
    print("Tests des nouvelles fonctionnalit√©s de gestion Supply Chain via IA")
    
    resultats = []
    
    # Tests fournisseurs
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_fournisseurs())
    
    # Tests demandes prix
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_demandes_prix())
    
    # Tests bons achat
    print(f"\n{'='*80}")
    resultats.append(test_assistant_ia_bons_achat())
    
    # Tests int√©grit√©
    print(f"\n{'='*80}")
    resultats.append(test_integrite_fonctions_supply_chain())
    
    # R√©sum√© final
    print(f"\n{'='*80}")
    if all(resultats):
        print("üéâ TOUS LES TESTS SUPPLY CHAIN R√âUSSIS!")
        print("‚úÖ L'assistant IA peut g√©rer fournisseurs, demandes prix et bons d'achat!")
        test_exemples_usage_supply_chain()
        return True
    else:
        print("‚ùå CERTAINS TESTS SUPPLY CHAIN ONT √âCHOU√â")
        print("üîç V√©rifiez la configuration et les d√©pendances supply chain")
        return False

if __name__ == "__main__":
    success = test_complet_supply_chain()
    print(f"\nüèÅ Tests Supply Chain termin√©s - {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
    
    print(f"\nüìã R√âSUM√â DES NOUVELLES CAPACIT√âS SUPPLY CHAIN IA:")
    print("   üîπ Cr√©ation automatique fournisseurs avec cat√©gories construction")
    print("   üîπ Modification intelligente coordonn√©es et certifications")
    print("   üîπ G√©n√©ration demandes prix structur√©es multi-lignes")
    print("   üîπ Modification dynamique demandes avec ajout/suppression articles")
    print("   üîπ Cr√©ation bons d'achat avec calcul automatique totaux")
    print("   üîπ Gestion livraisons et conditions sp√©ciales")
    print("   üîπ Validation automatique formats qu√©b√©cois (t√©l√©phone, adresses)")
    print("   üîπ Interface conversationnelle naturelle fran√ßaise")
    
    if success:
        print(f"\nüéØ L'ASSISTANT IA SUPPLY CHAIN EST OP√âRATIONNEL!")
        print("   Peut g√©rer: FOURNISSEURS, DEMANDES PRIX, BONS D'ACHAT")
        print("   Int√©gration compl√®te avec: PROJETS, DEVIS, PRODUITS, RH, CRM")
        print("   Via instructions en fran√ßais qu√©b√©cois naturel!")
        print(f"\nüåü L'ERP EST MAINTENANT ENTI√àREMENT G√âR√â PAR IA!")
        print("   Modules IA complets: PROJETS + DEVIS + PRODUITS + RH + CRM + SUPPLY CHAIN")